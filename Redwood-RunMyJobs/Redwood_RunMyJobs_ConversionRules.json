{
  "hierarchyRules" : [ {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Link job to folder Rule ----\r\nInteger number = new Integer(0);\r\n\r\n//A map - key: ctmFolder, Value: List of RBCs\r\nfoldersRbcsMap = [:];\r\n\r\n// A list that holds all Top level folders (SMART Folders)\r\ntopLevelFoldersList = [];\r\n\r\nctmWorkspace.getAllFolders().each { ctmFolder ->\r\n    CtmXmlElement folderElement = ctmFolder.getFolderInputXmlData();\r\n    addTimeWindowsToTopLevelFolder(ctmFolder, folderElement);\r\n    if (isEmpty(ctmFolder)) {\r\n        def jobChainStepElements = folderElement.getAllDecnedElementByName(\"JobChainStep\");\r\n        //run over each \"JobChainStep\" element and look for the \"JobChainCall\" inside it\r\n        jobChainStepElements.each { listElement ->\r\n            number = workOnStepElement(ctmFolder, number, listElement);\r\n        }\r\n    }\r\n}\r\n\r\nprivate boolean isEmpty(CtmFolder ctmFolder) {\r\n    ctmFolder.getChildren().size() == 0\r\n}\r\n\r\n// Fill topLevelFoldersList\r\nctmWorkspace.getAllFolders().each { ctmFolder ->\r\n    if (isTopLevelFolder(ctmFolder))\r\n        topLevelFoldersList.add(ctmFolder);\r\n}\r\n\r\nprivate boolean isTopLevelFolder(ctmFolder) {\r\n    ctmFolder.getParentFolder() == null\r\n}\r\n\r\n// go over on all the top level folders\r\n// check if the folder has sub folders\r\n// if sub folders exist send the sub folder and smart folder to \"addChildFolderRbcsToParentFolder\"\r\n// add sub folder's RBCs to the smart folder\r\ntopLevelFoldersList.each { smartFolder ->\r\n    List<CtmFolder> subFolders = smartFolder.getSubFolders();\r\n    if (subFolders.size() > 0) {\r\n        subFolders.each { subFolder ->\r\n            addChildFolderRbcsToParentFolder(subFolder)\r\n            copySubFolderRbcsToParentFolder(subFolder, smartFolder)\r\n        }\r\n    }\r\n}\r\n\r\n// run recursivly until getting to the lowest sub folder level (sub folder that contains only jobs)\r\n// then call copySubFolderRbcsToParentFolder\r\ndef addChildFolderRbcsToParentFolder(CtmFolder childFolder) {\r\n    List<CtmFolder> subFolders = childFolder.getSubFolders();\r\n    subFolders.each { subFolder ->\r\n        addChildFolderRbcsToParentFolder(subFolder);\r\n        copySubFolderRbcsToParentFolder(subFolder, childFolder)\r\n    }\r\n}\r\n\r\ndef copySubFolderRbcsToParentFolder(CtmFolder childFolder, CtmFolder parentFolder) {\r\n    def childFolderCalendars = foldersRbcsMap.get(childFolder);\r\n    def parentFolderCalendars = foldersRbcsMap.get(parentFolder);\r\n    childFolderCalendars.each { calendar ->\r\n        if (!parentFolderCalendars.contains(calendar)) {\r\n            parentFolder.scheduling().addControlmLevelRuleBasedCalendar(calendar);\r\n            parentFolderCalendars.add(calendar);\r\n        }\r\n    }\r\n    foldersRbcsMap.parentFolder = parentFolderCalendars;\r\n}\r\n\r\ndef workOnStepElement(CtmFolder folderx, Integer number, CtmXmlElement stepElement) {\r\n    def jobChainCallElements = stepElement.getAllDecnedElementByName(\"JobChainCall\");\r\n    jobChainCallElements.each { jobChainCallElement ->\r\n        number = workOnCallElement(folderx, number, jobChainCallElement);\r\n        addTimeWindowToChildren(jobChainCallElement);\r\n    }\r\n    return number;\r\n}\r\n\r\ndef workOnCallElement(def folderx, Integer number, CtmXmlElement jobChainCall) {\r\n    //catch the \"JobDefinition\" element and extract the name of the job/sub folder that should be placed inside the folder\r\n    CtmXmlElement jobDefintionElement = jobChainCall.getFirstChildElementByName(\"JobDefinition\");\r\n    String jobPath = jobDefintionElement.getAttribute(\"path\");\r\n    Pattern pathPattern = Pattern.compile(\"(.*)\\\\.(.*)\");\r\n    Matcher matcher = pathPattern.matcher(jobPath);\r\n    if (matcher.find()) {\r\n        String jobName = matcher.group(2);\r\n        def entity = ctmWorkspace.getJobsByName(jobName)[0];\r\n        if (entity == null) {\r\n            entity = ctmWorkspace.getFoldersByName(jobName)[0];\r\n            if (entity != null) {\r\n                entity = getEntityWithoutParent(entity);\r\n                number = workOnFolderElement(folderx, number, jobChainCall, entity);\r\n            }\r\n        } else {\r\n            entity = getEntityWithoutParent(entity);\r\n            number = addEntityToFolder(entity, folderx, number);\r\n        }\r\n    }\r\n    return number;\r\n}\r\n\r\n//add the sub folder to the folder \"folderx\" and then run over all the sub folder's children (jobs or sub folders)\r\ndef workOnFolderElement(def folderx, Integer number, CtmXmlElement callForJobChain, CtmFolder ctmFolder) {\r\n    addEntityToFolder(ctmFolder, folderx, number)\r\n    if (isEmpty(ctmFolder)) {\r\n        def listElements = ctmFolder.getFolderInputXmlData().getAllDecnedElementByName(\"JobChainStep\");\r\n        listElements.each { listElement ->\r\n            number = workOnStepElement(ctmFolder, number, listElement);\r\n        }\r\n    }\r\n    return number;\r\n}\r\n\r\n//add the job/sub folder to the folder \"folderx\"\r\ndef addEntityToFolder(def entity, def folderx, Integer number) {\r\n    if (entity != null && folderx != null) {\r\n        entity.setDescription(number.toString());\r\n        number = number + 1;\r\n        if (entity instanceof CtmFolder) {\r\n            ctmWorkspace.insertFolderToFolder(entity, folderx);\r\n        } else {\r\n            ctmWorkspace.insertJobToFolder(entity, folderx);\r\n        }\r\n    }\r\n    return number;\r\n}\r\n\r\n//create new entity from the entity definition\r\ndef getEntityWithoutParent(def entity) {\r\n    if (entity.getParentFolder() == null) {\r\n        return entity;\r\n    } else {\r\n        def newEntity;\r\n        if (entity instanceof CtmFolder) {\r\n            newEntity = ctmWorkspace.createFolder(entity.getFolderInputXmlData())\r\n            newEntity.general().setName(entity.getName());\r\n        } else {\r\n            newEntity = ctmWorkspace.createJob(entity.getJobInputXmlData())\r\n            newEntity.general().setName(entity.getName());\r\n        }\r\n        return newEntity;\r\n    }\r\n}\r\n\r\ndef addTimeWindowsToTopLevelFolder(CtmFolder folder, def jobChainCall) {\r\n    def calendarList = [];\r\n    def isFolderExistInTheMap = false;\r\n    if (foldersRbcsMap.containsKey(folder)) {\r\n        calendarList = foldersRbcsMap.get(folder);\r\n        isFolderExistInTheMap = true;\r\n    }\r\n    def timeWindowFirstElement = jobChainCall.getFirstChildElementByName(\"TimeWindow\");\r\n    String timeWindowName = getValueFromPathAttr(timeWindowFirstElement);\r\n    if (timeWindowName?.trim() && !calendarList.contains(timeWindowName)) {\r\n        folder.scheduling().addControlmLevelRuleBasedCalendar(timeWindowName);\r\n        calendarList.add(timeWindowName);\r\n    }\r\n    def jobChainCallElements = jobChainCall.getAllDecnedElementByName(\"JobChainCall\");\r\n    jobChainCallElements.each { jobChainCallElement ->\r\n        String timeWindow = getTimeWindow(jobChainCallElement);\r\n        if (timeWindow?.trim() && !calendarList.contains(timeWindow)) {\r\n            folder.scheduling().addControlmLevelRuleBasedCalendar(timeWindow);\r\n            calendarList.add(timeWindow);\r\n        }\r\n    }\r\n    if (!isFolderExistInTheMap)\r\n        foldersRbcsMap.put(folder, calendarList);\r\n    else\r\n        foldersRbcsMap.folder = calendarList;\r\n}\r\n\r\ndef addTimeWindowToChildren(def callElement) {\r\n    def isFolder = false;\r\n    def jobDefinition = callElement.getFirstChildElementByName(\"JobDefinition\");\r\n    if (jobDefinition) {\r\n        jobName = getValueFromPathAttr(jobDefinition);\r\n        def ctmChild = ctmWorkspace.getJobsByName(jobName)[0];\r\n        if (!ctmChild) {\r\n            ctmChild = ctmWorkspace.getFoldersByName(jobName)[0];\r\n            if (!ctmChild) return;\r\n            isFolder = true;\r\n        }\r\n        def timeWindowName = getTimeWindow(callElement);\r\n        if (timeWindowName?.trim()) {\r\n            if (isFolder == true) {\r\n                if (foldersRbcsMap.containsKey(ctmChild)) {\r\n                    def calendarListOfFolder = foldersRbcsMap.get(ctmChild);\r\n                    if (calendarListOfFolder && !calendarListOfFolder.contains(timeWindowName)) {\r\n                        calendarListOfFolder.add(timeWindowName);\r\n                        ctmChild.scheduling().useSpecificRuleBasedCalendar(timeWindowName);\r\n                        foldersRbcsMap.ctmChild = calendarListOfFolder;\r\n                    }\r\n                } else {\r\n                    def calendarList = [];\r\n                    calendarList.add(timeWindowName);\r\n                    ctmChild.scheduling().useSpecificRuleBasedCalendar(timeWindowName);\r\n                    foldersRbcsMap.put(ctmChild, calendarList);\r\n                }\r\n            } else {\r\n                ctmChild.scheduling().useSpecificRuleBasedCalendar(timeWindowName);\r\n            }\r\n        }\r\n        def startTime = getStartTime(callElement);\r\n        if (startTime?.trim())\r\n            ctmChild.scheduling().setTimeSettings(startTime, \"\");\r\n    }\r\n}\r\n\r\ndef getValueFromPathAttr(def elementWithPath) {\r\n    def pathValue = elementWithPath.getAttribute(\"path\");\r\n    Pattern pathPattern = Pattern.compile(\"(.*)\\\\.(.*)\");\r\n    Matcher matcher = pathPattern.matcher(pathValue);\r\n    if (matcher.find()) {\r\n        String valueAfterDot = matcher.group(2);\r\n        return valueAfterDot;\r\n    }\r\n}\r\n\r\n// Description: Check the value of 'StartTime' Expression element, and try to get the Control-M 'From Time' value\r\n//              We support two formats:\r\n//                  a. HH:MM (Example: 12:30)\r\n//                  b. HH:MM which is a 3rd parameter inside a method (Example: =$.Custom_RELStartTime.getStartTime(topLevelJobId, jobId, '20:00')\r\n// Input Parameter: jobChainCallElement XML element\r\n// Return value:    HHMM string if one of above patterns found or Null in case no match\r\ndef getStartTime(def jobChainCallElement) {\r\n    def startTime = null;\r\n    def jobChainCallSchedulingParameter = jobChainCallElement.getFirstChildElementByName(\"JobChainCallSchedulingParameter\");\r\n    if (jobChainCallSchedulingParameter) {\r\n        def name = jobChainCallSchedulingParameter.getValueOfFirstChildElementByName(\"Name\");\r\n        if (name.equals(\"StartTime\")) {\r\n            def startTimeExpression = jobChainCallSchedulingParameter.getValueOfFirstChildElementByName(\"Expression\");\r\n            if (startTimeExpression) {\r\n                // We check if the value starts with HH:MM format\r\n                Pattern timePattern = Pattern.compile(\"^([0-9]{2}):([0-9]{2})\");\r\n                Matcher matcher = timePattern.matcher(startTimeExpression);\r\n                if (matcher.find()) {\r\n                    startTime = String.format(\"%02d%02d\", matcher.group(1) as Integer, matcher.group(2) as Integer);\r\n                }\r\n                if (startTime == null) {\r\n                    // We check if HH:MM value is a 3rd parameter inside a method (Example: =$.Custom_RELStartTime.getStartTime(topLevelJobId, jobId, '20:00')\r\n                    String regexPatternThirdParameter = \"\\\\(.*,.*,(.*)\\\\)\";\r\n                    Pattern patternThirdParameter = Pattern.compile(regexPatternThirdParameter);\r\n                    Matcher matcherThirdParameter = patternThirdParameter.matcher(startTimeExpression);\r\n                    if (matcherThirdParameter.find()) {\r\n                        def thirdParameter = matcherThirdParameter.group(1).trim();\r\n                        Pattern patternForTime = Pattern.compile(\"([0-9]{2}):([0-9]{2})\");\r\n                        Matcher matcherForTime = patternForTime.matcher(thirdParameter);\r\n                        if (matcherForTime.find()) {\r\n                            startTime = String.format(\"%02d%02d\", matcherForTime.group(1) as Integer, matcherForTime.group(2) as Integer);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    return startTime;\r\n}\r\n\r\n// Description: Check the 'TimeWindow' element':\r\n//             1. if the 'TimeWindow' element is not empty: take the value of attribute 'Path' in 'TimeWindow' element by calling the function 'getValueFromPathAttr'\r\n//             2. if the 'TimeWindow' element is empty:\r\n//                     Check the value of 'TimeWindow' 'Expression' element if it matches the format:\r\n//                     the calendar Name is a 3rd parameter inside a method (Example: =$.Custom_RELStartTime.isTimeWindowOpen(topLevelJobId, jobId, 'J3_DAILY'))\r\n// Input Parameter: jobChainCallElement XML element\r\n// Return value: string of calendar name if one of above patterns found or Null in case no match\r\ndef getTimeWindow(def jobChainCallElement) {\r\n    def timeWindowName = null;\r\n    def jobChainCallPrecondition = jobChainCallElement.getFirstChildElementByName(\"JobChainCallPrecondition\");\r\n    if (jobChainCallPrecondition) {\r\n        def timeWindow = jobChainCallPrecondition.getFirstChildElementByName(\"TimeWindow\");\r\n        if (timeWindow) {\r\n            def timeWindowValue = getValueFromPathAttr(timeWindow);\r\n            if (timeWindowValue?.trim())\r\n                timeWindowName = timeWindowValue;\r\n        }\r\n        if (timeWindowName == null) {\r\n            def timeWindowExpression = jobChainCallPrecondition.getValueOfFirstChildElementByName(\"Expression\");\r\n            String regexPatternThirdParameter = \"\\\\(.*,.*,(.*)\\\\)\";\r\n            Pattern patternThirdParameter = Pattern.compile(regexPatternThirdParameter);\r\n            Matcher matcherThirdParameter = patternThirdParameter.matcher(timeWindowExpression);\r\n            if (matcherThirdParameter.find()) {\r\n                def thirdParameter = matcherThirdParameter.group(1).trim();\r\n                String regexPattern = \"'?([^']*)'?\";\r\n                Pattern pattern = Pattern.compile(regexPattern);\r\n                Matcher matcher = pattern.matcher(thirdParameter);\r\n                if (matcher.find()) {\r\n                    timeWindowName = matcher.group(1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return timeWindowName;\r\n}\r\n"
    },
    "name" : "Link jobs to folders",
    "category" : 2,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Link folder to folder Rule ----\n\nString argument = \"\";\ndef foldersList = ctmWorkspace.getAllFolders();\nfoldersList.each  { ctmSubFolder ->\n\tCtmXmlElement subFolderElement = ctmSubFolder.getFolderInputXmlData();\n\tCtmXmlElement parentElement = subFolderElement.getParent();\n\tif(parentElement != null && parentElement.getTagName().equals(argument))\n\t{\n\t\tCtmFolder ctmFolder = ctmWorkspace.getFolder(parentElement);\n\t\tctmWorkspace.insertFolderToFolder(ctmSubFolder, ctmFolder);\n\t}\n}"
    },
    "name" : "Link folders to folders",
    "category" : 2,
    "type" : "regular"
  } ],
  "rulesForServer" : [ {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "String jobChainTopLevelQuery = \"//JobDefinition/JobDefinitionType[contains(@path,'.JobChain')]/..\";\r\nList<CtmXmlElement> jobChainXmlElements = ctmXmlQuery.findXmlElementsByXPath(jobChainTopLevelQuery);\r\nfor(CtmXmlElement jobChainElement: jobChainXmlElements)\r\n{\r\n\tCtmFolder ctmFolder = ctmWorkspace.createFolder(jobChainElement);\r\n}\t\t\t\t\t\r\n"
    },
    "name" : "Create Folder",
    "category" : 0,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Folder Name Rule ----\n\n// For each Control-M Folder created we getting the data from\n// the equivalent XML element data and set the value to be the Folder name\nctmWorkspace.getAllFolders().each{ ctmFolder ->\n\tCtmXmlElement folderElement = ctmFolder.getFolderInputXmlData();\n\tString folderName = folderElement.getValueOfFirstChildElementByName(\"Name\");\n\tctmFolder.setName(folderName);\n\t\n\t//Set Application + Sub Application\n    def applicationElement = folderElement.getFirstChildElementByName(\"ParentApplication\");\n    if(applicationElement != null && !applicationElement.equals(\"\")){\n    String applicationValue = applicationElement.getAttribute(\"path\");\n\tString regexPattern = \"(.*)\\\\.(.*)\\\\.(.*)\";\n\tPattern pattern = Pattern.compile(regexPattern);\n\tMatcher matcher = pattern.matcher(applicationValue);\n\tif(matcher.find() && matcher.group(2))\n\t{\n\t\tString application = matcher.group(2);\n\t\tctmFolder.setApplication(application);\n\t  if(matcher.group(3))\n\t  {\n\t\tString subApplication = matcher.group(3);\n\t\tctmFolder.setSubApplication(subApplication);\n\t  }\n\t}\n  }\n}\n\n\n\n\n"
    },
    "name" : "Folder Name",
    "category" : 0,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "Element Name",
        "value" : "JobDefinition",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Create Job Rule ----\nString xpathQuery = \"/JobDefinition\";    // XPath query of the XML element we look for in XML Input Data\n\n// Retrieve all elements with tag name equals to \"JobDefinition\" XML elements into jobsElementData list\nList<CtmXmlElement> jobsElementData = ctmXmlQuery.findXmlElementsByXPath(xpathQuery);\n\n// Run in a loop on all elements with tag name equals to \"JobDefinition\" XML elements found, and create a Control-M Job for each one of them\n// For each Control-M Job created we keep the equivalent XML element data\nfor(CtmXmlElement jobElementData : jobsElementData) {\n        String pathValue = jobElementData.getDirectChildsElementAttrByName(\"JobDefinitionType\", \"path\")[0];\n        if (!pathValue.contains(\".JobChain\")){\n             CtmJob ctmJob = ctmWorkspace.createJob(jobElementData);\n        }\n}"
    },
    "name" : "Create Job",
    "category" : 1,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "Element Name",
        "value" : "Name",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Job Name Rule ----\n\n// For each Control-M Job created we getting the text of child element tag name \"Name\" from\n// the equivalent XML element data and set the value to be the Job name\nString argument = \"Name\";\nctmWorkspace.getAllJobs().each{ ctmJob ->\n\tCtmXmlElement jobElement = ctmJob.getJobInputXmlData();\n\tString jobName = jobElement.getValueOfFirstChildElementByName(argument);\n\tctmJob.setName(jobName);\n}\n"
    },
    "name" : "Job Name",
    "category" : 1,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//---Create Job Host/Host Group Rule---\r\n\r\nString argument = \"\";\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n setHost(ctmJob);\r\n}\r\n\r\ndef setHost(CtmJob ctmJob){\r\n    CtmXmlElement jobDef = ctmJob.getJobInputXmlData();\r\n\tdef jobDefaultQueue = jobDef.getFirstChildElementByName(\"DefaultQueue\");\r\n\tif(jobDefaultQueue != null){\r\n\t  String jobDefaultQueuePathValue = jobDefaultQueue.getAttribute(\"path\");\r\n\t  regexPattern = \"(.*)\\\\.(.*)\";\r\n\t  pattern = Pattern.compile(regexPattern);\r\n\t  matcher = pattern.matcher(jobDefaultQueuePathValue);\r\n\t  if(matcher.find() && matcher.group(2))\r\n\t  {\r\n\t\tString host = matcher.group(2);\r\n\t\tctmJob.setHost(host);\r\n\t  }\r\n\t}\r\n}"
    },
    "name" : "Job Job Host/Host Group",
    "category" : 1,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//---Create Job Application Rule---\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n setApplicationAndSubApplication(ctmJob);\r\n}\r\n\r\ndef setApplicationAndSubApplication(CtmJob ctmJob){\r\n    CtmXmlElement xmlElement = ctmJob.getJobInputXmlData();\r\n\tString jobDefPathValue = xmlElement.getFirstChildElementByName(\"ParentApplication\").getAttribute(\"path\");\r\n\tString regexPattern = \"(.*)\\\\.(.*)\\\\.(.*)\";\r\n\tPattern pattern = Pattern.compile(regexPattern);\r\n\tMatcher matcher = pattern.matcher(jobDefPathValue);\r\n\tif(matcher.find())\r\n\t{\r\n\t    if(matcher.group(2))\r\n\t    {\r\n           String application = matcher.group(2);\r\n\t       ctmJob.setApplication(application);\r\n\t    }\r\n\t    if(matcher.group(3))\r\n\t    {\r\n\t        String subApplication = matcher.group(3);\r\n\t        ctmJob.setSubApplication(subApplication);\r\n\t    }\r\n\t}\r\n}"
    },
    "name" : "Job Job Application",
    "category" : 1,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Link job to folder Rule ----\r\nInteger number = new Integer(0);\r\n\r\n//A map - key: ctmFolder, Value: List of RBCs\r\nfoldersRbcsMap = [:];\r\n\r\n// A list that holds all Top level folders (SMART Folders)\r\ntopLevelFoldersList = [];\r\n\r\nctmWorkspace.getAllFolders().each { ctmFolder ->\r\n    CtmXmlElement folderElement = ctmFolder.getFolderInputXmlData();\r\n    addTimeWindowsToTopLevelFolder(ctmFolder, folderElement);\r\n    if (isEmpty(ctmFolder)) {\r\n        def jobChainStepElements = folderElement.getAllDecnedElementByName(\"JobChainStep\");\r\n        //run over each \"JobChainStep\" element and look for the \"JobChainCall\" inside it\r\n        jobChainStepElements.each { listElement ->\r\n            number = workOnStepElement(ctmFolder, number, listElement);\r\n        }\r\n    }\r\n}\r\n\r\nprivate boolean isEmpty(CtmFolder ctmFolder) {\r\n    ctmFolder.getChildren().size() == 0\r\n}\r\n\r\n// Fill topLevelFoldersList\r\nctmWorkspace.getAllFolders().each { ctmFolder ->\r\n    if (isTopLevelFolder(ctmFolder))\r\n        topLevelFoldersList.add(ctmFolder);\r\n}\r\n\r\nprivate boolean isTopLevelFolder(ctmFolder) {\r\n    ctmFolder.getParentFolder() == null\r\n}\r\n\r\n// go over on all the top level folders\r\n// check if the folder has sub folders\r\n// if sub folders exist send the sub folder and smart folder to \"addChildFolderRbcsToParentFolder\"\r\n// add sub folder's RBCs to the smart folder\r\ntopLevelFoldersList.each { smartFolder ->\r\n    List<CtmFolder> subFolders = smartFolder.getSubFolders();\r\n    if (subFolders.size() > 0) {\r\n        subFolders.each { subFolder ->\r\n            addChildFolderRbcsToParentFolder(subFolder)\r\n            copySubFolderRbcsToParentFolder(subFolder, smartFolder)\r\n        }\r\n    }\r\n}\r\n\r\n// run recursivly until getting to the lowest sub folder level (sub folder that contains only jobs)\r\n// then call copySubFolderRbcsToParentFolder\r\ndef addChildFolderRbcsToParentFolder(CtmFolder childFolder) {\r\n    List<CtmFolder> subFolders = childFolder.getSubFolders();\r\n    subFolders.each { subFolder ->\r\n        addChildFolderRbcsToParentFolder(subFolder);\r\n        copySubFolderRbcsToParentFolder(subFolder, childFolder)\r\n    }\r\n}\r\n\r\ndef copySubFolderRbcsToParentFolder(CtmFolder childFolder, CtmFolder parentFolder) {\r\n    def childFolderCalendars = foldersRbcsMap.get(childFolder);\r\n    def parentFolderCalendars = foldersRbcsMap.get(parentFolder);\r\n    childFolderCalendars.each { calendar ->\r\n        if (!parentFolderCalendars.contains(calendar)) {\r\n            parentFolder.scheduling().addControlmLevelRuleBasedCalendar(calendar);\r\n            parentFolderCalendars.add(calendar);\r\n        }\r\n    }\r\n    foldersRbcsMap.parentFolder = parentFolderCalendars;\r\n}\r\n\r\ndef workOnStepElement(CtmFolder folderx, Integer number, CtmXmlElement stepElement) {\r\n    def jobChainCallElements = stepElement.getAllDecnedElementByName(\"JobChainCall\");\r\n    jobChainCallElements.each { jobChainCallElement ->\r\n        number = workOnCallElement(folderx, number, jobChainCallElement);\r\n        addTimeWindowToChildren(jobChainCallElement);\r\n    }\r\n    return number;\r\n}\r\n\r\ndef workOnCallElement(def folderx, Integer number, CtmXmlElement jobChainCall) {\r\n    //catch the \"JobDefinition\" element and extract the name of the job/sub folder that should be placed inside the folder\r\n    CtmXmlElement jobDefintionElement = jobChainCall.getFirstChildElementByName(\"JobDefinition\");\r\n    String jobPath = jobDefintionElement.getAttribute(\"path\");\r\n    Pattern pathPattern = Pattern.compile(\"(.*)\\\\.(.*)\");\r\n    Matcher matcher = pathPattern.matcher(jobPath);\r\n    if (matcher.find()) {\r\n        String jobName = matcher.group(2);\r\n        def entity = ctmWorkspace.getJobsByName(jobName)[0];\r\n        if (entity == null) {\r\n            entity = ctmWorkspace.getFoldersByName(jobName)[0];\r\n            if (entity != null) {\r\n                entity = getEntityWithoutParent(entity);\r\n                number = workOnFolderElement(folderx, number, jobChainCall, entity);\r\n            }\r\n        } else {\r\n            entity = getEntityWithoutParent(entity);\r\n            number = addEntityToFolder(entity, folderx, number);\r\n        }\r\n    }\r\n    return number;\r\n}\r\n\r\n//add the sub folder to the folder \"folderx\" and then run over all the sub folder's children (jobs or sub folders)\r\ndef workOnFolderElement(def folderx, Integer number, CtmXmlElement callForJobChain, CtmFolder ctmFolder) {\r\n    addEntityToFolder(ctmFolder, folderx, number)\r\n    if (isEmpty(ctmFolder)) {\r\n        def listElements = ctmFolder.getFolderInputXmlData().getAllDecnedElementByName(\"JobChainStep\");\r\n        listElements.each { listElement ->\r\n            number = workOnStepElement(ctmFolder, number, listElement);\r\n        }\r\n    }\r\n    return number;\r\n}\r\n\r\n//add the job/sub folder to the folder \"folderx\"\r\ndef addEntityToFolder(def entity, def folderx, Integer number) {\r\n    if (entity != null && folderx != null) {\r\n        entity.setDescription(number.toString());\r\n        number = number + 1;\r\n        if (entity instanceof CtmFolder) {\r\n            ctmWorkspace.insertFolderToFolder(entity, folderx);\r\n        } else {\r\n            ctmWorkspace.insertJobToFolder(entity, folderx);\r\n        }\r\n    }\r\n    return number;\r\n}\r\n\r\n//create new entity from the entity definition\r\ndef getEntityWithoutParent(def entity) {\r\n    if (entity.getParentFolder() == null) {\r\n        return entity;\r\n    } else {\r\n        def newEntity;\r\n        if (entity instanceof CtmFolder) {\r\n            newEntity = ctmWorkspace.createFolder(entity.getFolderInputXmlData())\r\n            newEntity.general().setName(entity.getName());\r\n        } else {\r\n            newEntity = ctmWorkspace.createJob(entity.getJobInputXmlData())\r\n            newEntity.general().setName(entity.getName());\r\n        }\r\n        return newEntity;\r\n    }\r\n}\r\n\r\ndef addTimeWindowsToTopLevelFolder(CtmFolder folder, def jobChainCall) {\r\n    def calendarList = [];\r\n    def isFolderExistInTheMap = false;\r\n    if (foldersRbcsMap.containsKey(folder)) {\r\n        calendarList = foldersRbcsMap.get(folder);\r\n        isFolderExistInTheMap = true;\r\n    }\r\n    def timeWindowFirstElement = jobChainCall.getFirstChildElementByName(\"TimeWindow\");\r\n    String timeWindowName = getValueFromPathAttr(timeWindowFirstElement);\r\n    if (timeWindowName?.trim() && !calendarList.contains(timeWindowName)) {\r\n        folder.scheduling().addControlmLevelRuleBasedCalendar(timeWindowName);\r\n        calendarList.add(timeWindowName);\r\n    }\r\n    def jobChainCallElements = jobChainCall.getAllDecnedElementByName(\"JobChainCall\");\r\n    jobChainCallElements.each { jobChainCallElement ->\r\n        String timeWindow = getTimeWindow(jobChainCallElement);\r\n        if (timeWindow?.trim() && !calendarList.contains(timeWindow)) {\r\n            folder.scheduling().addControlmLevelRuleBasedCalendar(timeWindow);\r\n            calendarList.add(timeWindow);\r\n        }\r\n    }\r\n    if (!isFolderExistInTheMap)\r\n        foldersRbcsMap.put(folder, calendarList);\r\n    else\r\n        foldersRbcsMap.folder = calendarList;\r\n}\r\n\r\ndef addTimeWindowToChildren(def callElement) {\r\n    def isFolder = false;\r\n    def jobDefinition = callElement.getFirstChildElementByName(\"JobDefinition\");\r\n    if (jobDefinition) {\r\n        jobName = getValueFromPathAttr(jobDefinition);\r\n        def ctmChild = ctmWorkspace.getJobsByName(jobName)[0];\r\n        if (!ctmChild) {\r\n            ctmChild = ctmWorkspace.getFoldersByName(jobName)[0];\r\n            if (!ctmChild) return;\r\n            isFolder = true;\r\n        }\r\n        def timeWindowName = getTimeWindow(callElement);\r\n        if (timeWindowName?.trim()) {\r\n            if (isFolder == true) {\r\n                if (foldersRbcsMap.containsKey(ctmChild)) {\r\n                    def calendarListOfFolder = foldersRbcsMap.get(ctmChild);\r\n                    if (calendarListOfFolder && !calendarListOfFolder.contains(timeWindowName)) {\r\n                        calendarListOfFolder.add(timeWindowName);\r\n                        ctmChild.scheduling().useSpecificRuleBasedCalendar(timeWindowName);\r\n                        foldersRbcsMap.ctmChild = calendarListOfFolder;\r\n                    }\r\n                } else {\r\n                    def calendarList = [];\r\n                    calendarList.add(timeWindowName);\r\n                    ctmChild.scheduling().useSpecificRuleBasedCalendar(timeWindowName);\r\n                    foldersRbcsMap.put(ctmChild, calendarList);\r\n                }\r\n            } else {\r\n                ctmChild.scheduling().useSpecificRuleBasedCalendar(timeWindowName);\r\n            }\r\n        }\r\n        def startTime = getStartTime(callElement);\r\n        if (startTime?.trim())\r\n            ctmChild.scheduling().setTimeSettings(startTime, \"\");\r\n    }\r\n}\r\n\r\ndef getValueFromPathAttr(def elementWithPath) {\r\n    def pathValue = elementWithPath.getAttribute(\"path\");\r\n    Pattern pathPattern = Pattern.compile(\"(.*)\\\\.(.*)\");\r\n    Matcher matcher = pathPattern.matcher(pathValue);\r\n    if (matcher.find()) {\r\n        String valueAfterDot = matcher.group(2);\r\n        return valueAfterDot;\r\n    }\r\n}\r\n\r\n// Description: Check the value of 'StartTime' Expression element, and try to get the Control-M 'From Time' value\r\n//              We support two formats:\r\n//                  a. HH:MM (Example: 12:30)\r\n//                  b. HH:MM which is a 3rd parameter inside a method (Example: =$.Custom_RELStartTime.getStartTime(topLevelJobId, jobId, '20:00')\r\n// Input Parameter: jobChainCallElement XML element\r\n// Return value:    HHMM string if one of above patterns found or Null in case no match\r\ndef getStartTime(def jobChainCallElement) {\r\n    def startTime = null;\r\n    def jobChainCallSchedulingParameter = jobChainCallElement.getFirstChildElementByName(\"JobChainCallSchedulingParameter\");\r\n    if (jobChainCallSchedulingParameter) {\r\n        def name = jobChainCallSchedulingParameter.getValueOfFirstChildElementByName(\"Name\");\r\n        if (name.equals(\"StartTime\")) {\r\n            def startTimeExpression = jobChainCallSchedulingParameter.getValueOfFirstChildElementByName(\"Expression\");\r\n            if (startTimeExpression) {\r\n                // We check if the value starts with HH:MM format\r\n                Pattern timePattern = Pattern.compile(\"^([0-9]{2}):([0-9]{2})\");\r\n                Matcher matcher = timePattern.matcher(startTimeExpression);\r\n                if (matcher.find()) {\r\n                    startTime = String.format(\"%02d%02d\", matcher.group(1) as Integer, matcher.group(2) as Integer);\r\n                }\r\n                if (startTime == null) {\r\n                    // We check if HH:MM value is a 3rd parameter inside a method (Example: =$.Custom_RELStartTime.getStartTime(topLevelJobId, jobId, '20:00')\r\n                    String regexPatternThirdParameter = \"\\\\(.*,.*,(.*)\\\\)\";\r\n                    Pattern patternThirdParameter = Pattern.compile(regexPatternThirdParameter);\r\n                    Matcher matcherThirdParameter = patternThirdParameter.matcher(startTimeExpression);\r\n                    if (matcherThirdParameter.find()) {\r\n                        def thirdParameter = matcherThirdParameter.group(1).trim();\r\n                        Pattern patternForTime = Pattern.compile(\"([0-9]{2}):([0-9]{2})\");\r\n                        Matcher matcherForTime = patternForTime.matcher(thirdParameter);\r\n                        if (matcherForTime.find()) {\r\n                            startTime = String.format(\"%02d%02d\", matcherForTime.group(1) as Integer, matcherForTime.group(2) as Integer);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    return startTime;\r\n}\r\n\r\n// Description: Check the 'TimeWindow' element':\r\n//             1. if the 'TimeWindow' element is not empty: take the value of attribute 'Path' in 'TimeWindow' element by calling the function 'getValueFromPathAttr'\r\n//             2. if the 'TimeWindow' element is empty:\r\n//                     Check the value of 'TimeWindow' 'Expression' element if it matches the format:\r\n//                     the calendar Name is a 3rd parameter inside a method (Example: =$.Custom_RELStartTime.isTimeWindowOpen(topLevelJobId, jobId, 'J3_DAILY'))\r\n// Input Parameter: jobChainCallElement XML element\r\n// Return value: string of calendar name if one of above patterns found or Null in case no match\r\ndef getTimeWindow(def jobChainCallElement) {\r\n    def timeWindowName = null;\r\n    def jobChainCallPrecondition = jobChainCallElement.getFirstChildElementByName(\"JobChainCallPrecondition\");\r\n    if (jobChainCallPrecondition) {\r\n        def timeWindow = jobChainCallPrecondition.getFirstChildElementByName(\"TimeWindow\");\r\n        if (timeWindow) {\r\n            def timeWindowValue = getValueFromPathAttr(timeWindow);\r\n            if (timeWindowValue?.trim())\r\n                timeWindowName = timeWindowValue;\r\n        }\r\n        if (timeWindowName == null) {\r\n            def timeWindowExpression = jobChainCallPrecondition.getValueOfFirstChildElementByName(\"Expression\");\r\n            String regexPatternThirdParameter = \"\\\\(.*,.*,(.*)\\\\)\";\r\n            Pattern patternThirdParameter = Pattern.compile(regexPatternThirdParameter);\r\n            Matcher matcherThirdParameter = patternThirdParameter.matcher(timeWindowExpression);\r\n            if (matcherThirdParameter.find()) {\r\n                def thirdParameter = matcherThirdParameter.group(1).trim();\r\n                String regexPattern = \"'?([^']*)'?\";\r\n                Pattern pattern = Pattern.compile(regexPattern);\r\n                Matcher matcher = pattern.matcher(thirdParameter);\r\n                if (matcher.find()) {\r\n                    timeWindowName = matcher.group(1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return timeWindowName;\r\n}\r\n"
    },
    "name" : "Link jobs to folders",
    "category" : 2,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- InCondition Rule ----\r\ndef folderList = ctmWorkspace.getAllFolders();\r\nconditionNameMap = [:];\r\nfolderList.each { ctmFolder -> \r\n    def childrenList = ctmFolder.getChildren();\r\n    if(childrenList.size() > 1){\r\n        //set the condition between the entites by the \"JobChainCall\" order\r\n        childrenList.sort{c1, c2 -> c1.getDescription().compareTo(c2.getDescription())};\r\n        for(int i = 0 ; i < childrenList.size()-1 ; i++)\r\n        {\r\n            def sourceEntity = childrenList.get(i);\r\n            def targetEntity = childrenList.get(i+1);\r\n            def conditionName = sourceEntity.getName()+ \"-TO-\" + targetEntity.getName();\r\n            conditionName = getUniqueConditionName(conditionName);\r\n            sourceEntity.actions().addOutCondition(conditionName);\r\n            targetEntity.prerequisites().addInCondition(conditionName);\r\n        }\r\n    }\r\n    \r\n    //Set folder's Description\r\n    CtmXmlElement folderDef = ctmFolder.getFolderInputXmlData();\r\n\tString description = folderDef.getValueOfFirstChildElementByName(\"Description\");\r\n\tctmFolder.setDescription(description);\r\n\t\r\n}\r\n\r\n//set remaining jobs description\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n  String currentDescription = ctmJob.getDescription();\r\n  if(currentDescription && currentDescription.isNumber()){\r\n      String origDescription = ctmJob.getJobInputXmlData().getValueOfFirstChildElementByName(\"Description\");\r\n      ctmJob.setDescription(origDescription);\r\n  }\r\n}\r\n\r\n//generate unique condition name (for example: if there is already condition name \"x\" then the method return \"x_1\")\r\ndef getUniqueConditionName(String originalConditionName){\r\n    String toRet = originalConditionName;\r\n    if(conditionNameMap.containsKey(originalConditionName)){\r\n        int suffix = conditionNameMap[originalConditionName];\r\n        conditionNameMap[originalConditionName] = suffix + 1;\r\n        toRet = toRet + \"_\" + suffix;\r\n    }\r\n    else{\r\n        conditionNameMap[originalConditionName] = 1;\r\n    }\r\n    return toRet;\r\n}"
    },
    "name" : "In Condition",
    "category" : 4,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Create SapR3 Job Rule ----\r\nctmWorkspace.getAllJobs().each { ctmJob ->\r\n    CtmXmlElement element = ctmJob.getJobInputXmlData();\r\n    String type = element.getDirectChildsElementAttrByName(\"JobDefinitionType\", \"path\")[0];\r\n    if (type.contains(\".SAPR3\")){\r\n        String sapType = getSapJobType(element);\r\n        //convert job to SAPR3 with Action: \"Create a new job\"\r\n        if(sapType.equals(\"ABAP_RUN_PRINT\")){\r\n            setSapR3Attributes(ctmJob);\r\n        }\r\n        if(sapType.equals(\"ABAP_RUN\")){\r\n            setSapR3Attributes(ctmJob);\r\n        }\r\n        if(sapType.equals(\"MULTI_STEP_RUN\")){\r\n            setSapR3Attributes(ctmJob);\r\n        }\r\n        //convert job to SAPR3 with Action: \"Copy an existing job\"\r\n        if(sapType.equals(\"TEMPLATE_JOB_RUN\")){\r\n            setSapCopyExsitingJob(ctmJob);\r\n        }\r\n    }\r\n}\r\n\r\n//convert job to SAPR3 with Action: \"Copy an existing job\"\r\ndef setSapCopyExsitingJob(CtmJob ctmJob){\r\n    def jobElementData = ctmJob.getJobInputXmlData();\r\n    ctmJob.setSapR3Type();\r\n    ctmJob.general().sapR3Parameters().setAction(SapR3Action.CopyAnExistingJob);\r\n    List<CtmXmlElement> parametersList = jobElementData.getDirectChildsElementbyName(\"JobDefinitionParameter\");\r\n    parametersList.each{ parameterElement ->\r\n        def parameterNameElement = parameterElement.getFirstChildElementByName(\"Name\");\r\n        String parameterName = parameterNameElement.getText();\r\n        def value = parameterElement.getValueOfFirstChildElementByName(\"DefaultExpression\");\r\n        if(parameterName.equals(\"JOBNAME\")){\r\n            ctmJob.general().sapR3Parameters().setSAPJobName(value);\r\n        }\r\n    }\r\n    ctmJob.general().sapR3Parameters().setConnectionProfile(\"DEFAULT_SAP_CONNECTION_PROFILE\");\r\n}\r\n//extract the SAPR3 job type (\"ABAP_RUN_PRINT\",\"TEMPLATE_JOB_RUN\" ...)\r\ndef getSapJobType(CtmXmlElement jobElement){\r\n    CtmXmlElement sapScriptElement = jobElement.getFirstChildElementByName(\"SAPScript\");\r\n    CtmXmlElement sapScriptAttr = sapScriptElement.getFirstChildElementByName(\"SAPScriptAttribute\");\r\n    String jobType = sapScriptAttr.getValueOfFirstChildElementByName(\"Value\");\r\n    return jobType;\r\n}\r\n\r\n//convert job to SAPR3 with Action: \"Create a new job\"\r\ndef setSapR3Attributes(CtmJob ctmJob){\r\n    ctmJob.setSapR3Type();\r\n    ctmJob.general().sapR3Parameters().setAction(SapR3Action.CreateANewJob);\r\n    CtmXmlElement jobElementData = ctmJob.getJobInputXmlData();\r\n    //set job's description\r\n    setJobDescription(ctmJob);\r\n    //set job's connectionProfile\r\n    String jobDefaultQueuePathValue = jobElementData.getFirstChildElementByName(\"DefaultQueue\").getAttribute(\"path\");\r\n    String regexPattern = \".*\\\\.(.*)\";\r\n    Pattern pattern = Pattern.compile(regexPattern);\r\n    Matcher matcher = pattern.matcher(jobDefaultQueuePathValue);\r\n    if(matcher.find() && matcher.group(1))\r\n    {\r\n        String connectionProfile = matcher.group(1);\r\n        ctmJob.general().sapR3Parameters().setConnectionProfile(connectionProfile);\r\n\r\n    }\r\n    else{\r\n        ctmJob.general().sapR3Parameters().setConnectionProfile(\"DEFAULT_SAP_CONNECTION_PROFILE\");\r\n    }\r\n\r\n    //set job's abap step + variables\r\n    List<CtmXmlElement> parametersList = jobElementData.getDirectChildsElementbyName(\"JobDefinitionParameter\");\r\n    String sapType = getSapJobType(ctmJob.getJobInputXmlData());\r\n    def steps;\r\n    if (\"MULTI_STEP_RUN\".equals(sapType)) {\r\n        steps = parametersList.groupBy {it.getFirstChildElementByName(\"GroupName\").getText() };\r\n        steps.each {\r\n            def step\r\n            def groupName = it.key\r\n            if (groupName.toString().toLowerCase().contains(\"step\")) {\r\n                step = createNewStep(ctmJob)\r\n            }\r\n\r\n            def stepDefinition = it.value\r\n            convertStep(ctmJob, step, stepDefinition)\r\n        };\r\n    } else {\r\n        convertStep(ctmJob, createNewStep(ctmJob), parametersList)\r\n    }\r\n}\r\n\r\ndef createNewStep(CtmJob ctmJob) {\r\n    ctmJob.general().sapR3Parameters().addAbapStep()\r\n}\r\n\r\nprivate void convertStep(CtmJob ctmJob, SapR3AbapStepAPI step, List<CtmXmlElement> parametersList) {\r\n    parametersList.each { parameterElement ->\r\n        def parameterNameElement = parameterElement.getFirstChildElementByName(\"Name\");\r\n        String parameterName = parameterNameElement.getText();\r\n        def value = parameterElement.getValueOfFirstChildElementByName(\"DefaultExpression\");\r\n        if (value.equals(\"\")) return;\r\n\r\n        switch (parameterName) {\r\n            case matches(\"JOBNAME\"):\r\n                ctmJob.general().sapR3Parameters().setSAPJobName(value);\r\n                break;\r\n            case matches(\"JOBCLASS\"):\r\n                setSapJobClass(ctmJob, value);\r\n                break;\r\n            case matches(\"ABAP_PROGRAM_NAME\"):\r\n                step.setAbapProgramName(value);\r\n                break;\r\n            case matches(\"ABAP_VARIANT_NAME\"):\r\n                step.setVariantName(value);\r\n                break;\r\n            case matches(\"TEMPORARY_VARIANT\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.setTemporaryVariant();\r\n                }\r\n                break;\r\n            case matches(\"SAP_USER_NAME\"):\r\n                step.setUser(value);\r\n                break;\r\n            case matches(\"LANGUAGE\"):\r\n                step.setLanguage(value);\r\n                break;\r\n            case matches(\"PRINT_ARMOD\"):\r\n                value = getPrintArchiveMode(value);\r\n                step.setPrintArchiveMode(value);\r\n                break;\r\n            case matches(\"PRINT_PDEST\"):\r\n                step.setOutputDevice(value);\r\n                break;\r\n            case matches(\"PRINT_PRTXT\"):\r\n                step.setDepartment(value);\r\n                step.setRecipient(value);\r\n                break;\r\n            case matches(\"PRINT_PRCOP\"):\r\n                step.setNumberOfCopies(value);\r\n                break;\r\n            case matches(\"PRINT_PRNEW\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.enableNewSpoolRequest();\r\n                } else {\r\n                    step.disableNewSpoolRequest();\r\n                }\r\n                break;\r\n            case matches(\"PRINT_PLIST\"):\r\n                step.setSpoolRequestName(value);\r\n                break;\r\n            case matches(\"PRINT_PRIMM\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.setTimeOfPrint(TimeOfPrint.PrintOutImmediately);\r\n                } else {\r\n                    step.setTimeOfPrint(TimeOfPrint.PrintLater);\r\n                }\r\n                break;\r\n            case matches(\"PRINT_PRREL\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.enableDeleteAfterPrint();\r\n                } else {\r\n                    step.disableDeleteAfterPrint();\r\n                }\r\n                break;\r\n            case matches(\"PRINT_PEXPI\"):\r\n                step.setPrintExpiration(value);\r\n                break;\r\n            case matches(\"PRINT_LICT\"):\r\n                step.setOutputFormatRows(value);\r\n                break;\r\n            case matches(\"PRINT_LISZ\"):\r\n                step.setOutputFormatColumns(value);\r\n                break;\r\n            case matches(\"PRINT_PAART\"):\r\n                step.setOutputFormatLayout(value);\r\n                break;\r\n            case matches(\"PRINT_PRBIG\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.enableSelectionCoverPage();\r\n                } else {\r\n                    step.disableSelectionCoverPage();\r\n                }\r\n                break;\r\n            case matches(\"PRINT_PRSAP\"):\r\n                value = getSapCoverPage(value);\r\n                step.setSapCoverPage(value);\r\n                break;\r\n            case matches(\"PRINT_PRBER\"):\r\n                step.setSpoolRequestAuthorization(value);\r\n                break;\r\n            case matches(\"PRINT_PRUNX\"):\r\n                value = getOsCoverSheet(value);\r\n                step.setOsCoverSheet(value);\r\n                break;\r\n            case matches(\"ARCHIVE_SAP_OBJECT\"):\r\n                step.setArchiveId(value);\r\n                break;\r\n            case matches(\"ARCHIVE_AR_OBJECT\"):\r\n                step.setArchiveDocumentType(value);\r\n                break;\r\n            case matches(\"ARCHIVE_INFO\"):\r\n                step.setArchiveInformationField(value);\r\n                break;\r\n            case matches(\"ARCHIVE_ARCTEXT\"):\r\n                step.setArchiveText(value);\r\n                break;\r\n            default:\r\n                setJobVariable(ctmJob, parameterElement, parameterName);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\ndef matches(String text) {\r\n    ~/${text}(_\\d+)?/\r\n}\r\n\r\ndef convertYesNoToBoolean(String value){\r\n    if(value.equalsIgnoreCase(\"Y\")){\r\n        return true;\r\n    }\r\n    else{\r\n        return false;\r\n    }\r\n}\r\n\r\ndef getSapCoverPage(String value){\r\n    if(value.equalsIgnoreCase(\"D\")){\r\n        return SapCoverPage.DefaultSetting;\r\n    }\r\n    else{\r\n        value = convertYesNoToBoolean(value);\r\n        if(value){\r\n            return SapCoverPage.Print;\r\n        }\r\n        else{\r\n            return SapCoverPage.DoNotPrint;\r\n        }\r\n    }\r\n}\r\n\r\ndef getOsCoverSheet(String value){\r\n    if(value.equalsIgnoreCase(\"D\")){\r\n        return OsCoverSheet.DefaultSetting;\r\n    }\r\n    else{\r\n        value = convertYesNoToBoolean(value);\r\n        if(value){\r\n            return OsCoverSheet.Print;\r\n        }\r\n        else{\r\n            return OsCoverSheet.DoNotPrint;\r\n        }\r\n    }\r\n}\r\n\r\ndef getPrintArchiveMode(String value){\r\n    switch(value){\r\n        case \"1\" :\r\n            return PrintArchiveMode.Print;\r\n            break;\r\n        case \"2\" :\r\n            return PrintArchiveMode.Archive;\r\n            break;\r\n        case \"3\" :\r\n            return PrintArchiveMode.PrintAndArchive\r\n            break;\r\n        default :\r\n            return \"\";\r\n    }\r\n}\r\n\r\ndef setSapJobClass (CtmJob ctmJob,String value){\r\n    switch (value){\r\n        case \"A\" :\r\n            ctmJob.general().sapR3Parameters().setJobClass(SapR3JobClass.HighPriority);\r\n            break;\r\n        case \"B\" :\r\n            ctmJob.general().sapR3Parameters().setJobClass(SapR3JobClass.MediumPriority);\r\n            break;\r\n        case \"C\" :\r\n            ctmJob.general().sapR3Parameters().setJobClass(SapR3JobClass.LowPriority);\r\n            break;\r\n    }\r\n}\r\n\r\ndef setJobDescription(CtmJob ctmJob){\r\n    def jobDef = ctmJob.getJobInputXmlData();\r\n    String description = jobDef.getValueOfFirstChildElementByName(\"Description\");\r\n    ctmJob.setDescription(description);\r\n}\r\n\r\ndef setJobVariable(CtmJob ctmJob, CtmXmlElement parameterElement, String parameterName){\r\n    if(shouldIgonreParameterWithName(parameterName))\r\n        return;\r\n    variableName = parameterName.startsWith(\"%%\") ? parameterName.replace(\"%%\",\"\") : parameterName;\r\n    String variableValue = parameterElement.getValueOfFirstChildElementByName(\"DefaultExpression\");\r\n    ctmJob.general().addLocalVariable(variableName, variableValue);\r\n}\r\n\r\n\r\ndef shouldIgonreParameterWithName(String parameterName) {\r\n    return [\"JOBNAME\",\"ABAP_PROGRAM_NAME\",\"ABAP_VARIANT_NAME\",\"TEMPORARY_VARIANT\",\"JOBCLASS\",\"SAP_USER_NAME\",\"LANGUAGE\",\"TARGET_SERVER\",\r\n            \"TARGET_GROUP\",\"PRINT_ARMOD\",\"PRINT_PDEST\",\"PRINT_PRTXT\",\"PRINT_PRCOP\",\"PRINT_PRNEW\",\"PRINT_PLIST\",\"PRINT_PRIMM\",\"PRINT_PRREL\",\r\n            \"PRINT_PEXPI\",\"PRINT_LICT\",\"PRINT_LISZ\",\"PRINT_PAART\",\"PRINT_PRBIG\",\"PRINT_PRSAP\",\"PRINT_PRREC\",\"PRINT_PRABT\",\"PRINT_PRBER\",\r\n            \"PRINT_PRDSN\",\"PRINT_PTYPE\",\"PRINT_FOOTL\",\"PRINT_PRUNX\",\"DRAFT_MODE\",\"PAGE_ORIENTATION\",\"ARCHIVE_SAP_OBJECT\",\"ARCHIVE_AR_OBJECT\",\r\n            \"ARCHIVE_INFO\",\"ARCHIVE_ARCTEXT\",\"SHOWLOG\",\"SHOWSPOOL\",\"DELETE_JOB\",\"JOBCOUNT\",\"SAP_SYSTEMS\",\"CLIENT\"].contains(parameterName);\r\n}\r\n"
    },
    "jobTypeName" : "SAP R3",
    "name" : "SAP R3 Job",
    "category" : 3,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Create Os Job Rule ----\r\n\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n\r\n        CtmXmlElement element = ctmJob.getJobInputXmlData();\r\n        String type = element.getDirectChildsElementAttrByName(\"JobDefinitionType\", \"path\")[0];\r\n        //if the job type is different then SAPR3 and the job has script element then he will be converted to Embedded Script job\r\n        if (!type.contains(\".SAPR3\") && isContainsScript(element)){\r\n            ctmJob.setOsType();\r\n            setJobVariables(ctmJob);\r\n            setJobDescription(ctmJob, type);\r\n        }\r\n}\r\n\r\ndef setJobVariables(CtmJob ctmJob){\r\n    def jobElementData = ctmJob.getJobInputXmlData();\r\n    List<CtmXmlElement> parametersList = jobElementData.getDirectChildsElementbyName(\"JobDefinitionParameter\");\r\n    parametersList.each{ parameterElement ->\r\n      def variableName = parameterElement.getValueOfFirstChildElementByName(\"Name\");\r\n      def variableValue = parameterElement.getValueOfFirstChildElementByName(\"DefaultExpression\")\r\n      if(variableName && variableValue){\r\n         variableName = variableName.startsWith(\"%%\") ? variableName.replace(\"%%\",\"\") : variableName;\r\n      }\r\n      ctmJob.general().addLocalVariable(variableName, variableValue);\r\n    }\r\n    \r\n}\r\n\r\n//check if the job contains Script element\r\ndef isContainsScript(element){\r\n    def scriptElement = element.getDirectChildsElementbyName(\"Script\");\r\n    return scriptElement.size() > 0;\r\n}\r\n//set the description for the job and chains the job type to the it\r\ndef setJobDescription(CtmJob ctmJob, type){\r\n    def jobElement = ctmJob.getJobInputXmlData();\r\n\tString description = jobElement.getValueOfFirstChildElementByName(\"Description\");\r\n\tctmJob.setDescription(description +\" \\n*** Type: \" + type + \" ***\");\r\n}"
    },
    "jobTypeName" : "OS",
    "name" : "OS Job",
    "category" : 3,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Create Os Embedded Script - Script Rule ----\r\n\r\nctmWorkspace.getOsJobs().each{ ctmJob ->\r\n\tCtmXmlElement jobElement = ctmJob.getJobInputXmlData();\r\n\tdef scriptElement = jobElement.getDirectChildsElementbyName(\"Script\")[0];\r\n\t//set the job script to the value of the \"Source\" element\r\n\tString embeddedScriptValue = scriptElement.getValueOfFirstChildElementByName(\"Source\");\r\n\tctmJob.general().osParameters().setEmbeddedScript(embeddedScriptValue);\r\n\t//set the Run as user to the value of the \"RunAsUser\" element (if there is such value)\r\n\tString runAsUser = scriptElement.getValueOfFirstChildElementByName(\"RunAsUser\");\r\n\tif(runAsUser && !runAsUser.isEmpty()){\r\n\t    \tctmJob.general().setRunAs(runAsUser);\r\n\t}\r\n\t//set the script file name to <jobname>.cmd\r\n\tctmJob.general().osParameters().setEmbeddedScriptFileName(ctmJob.getName() + \".cmd\");\r\n} "
    },
    "jobTypeName" : "OS",
    "name" : "OS Embedded Script - Script",
    "category" : 3,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Create SapBW Job Rule ----\r\n\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n    CtmXmlElement element = ctmJob.getJobInputXmlData();\r\n    String type = element.getDirectChildsElementAttrByName(\"JobDefinitionType\", \"path\")[0];\r\n    if (type.contains(\".SAPR3\")){\r\n           String sapType = getSapJobType(element);\r\n           //convert the job to SAP Business Warehouse \r\n           if(sapType.equals(\"BW_CHAIN_RUN\")){\r\n              setSapBwAttributes(ctmJob);    \r\n           }\r\n    }\r\n}\r\n// extract the SAP job type\r\ndef getSapJobType(CtmXmlElement jobElement){\r\n    CtmXmlElement sapScriptElement = jobElement.getFirstChildElementByName(\"SAPScript\");\r\n    CtmXmlElement sapScriptAttr = sapScriptElement.getFirstChildElementByName(\"SAPScriptAttribute\");\r\n    String jobType = sapScriptAttr.getValueOfFirstChildElementByName(\"Value\");\r\n    return jobType;\r\n}\r\n\r\n// set the SAP BW attributes\r\ndef setSapBwAttributes(CtmJob ctmJob){\r\n    ctmJob.setSapBWType();\r\n    setJobDescription(ctmJob);\r\n    setSapJobId(ctmJob);\r\n}\r\n// set the jobs's description\r\ndef setJobDescription(CtmJob ctmJob){\r\n    def jobElement = ctmJob.getJobInputXmlData();\r\n\tString description = jobElement.getValueOfFirstChildElementByName(\"Description\");\r\n\tctmJob.setDescription(description);\r\n}\r\n// set the SAP job id\r\ndef setSapJobId(CtmJob ctmJob){\r\n    CtmXmlElement jobElement = ctmJob.getJobInputXmlData();\r\n    def parameterList = jobElement.getDirectChildsElementbyName(\"JobDefinitionParameter\");\r\n    parameterList.each{ parameter ->\r\n        String parameterName = parameter.getValueOfFirstChildElementByName(\"Name\");\r\n        if(parameterName != null && parameterName.equals(\"NAME\")){\r\n            String sapJobId = parameter.getValueOfFirstChildElementByName(\"DefaultExpression\");\r\n            ctmJob.general().sapBWParameters().setID(sapJobId);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
    },
    "jobTypeName" : "SAP BW",
    "name" : "SAP BW Job",
    "category" : 3,
    "type" : "script"
  } ],
  "projectRuleSetDescription" : "Redwood RunMyJob conversion rules sample code, you can update the code according to your specific project needs",
  "folderRules" : [ {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "String jobChainTopLevelQuery = \"//JobDefinition/JobDefinitionType[contains(@path,'.JobChain')]/..\";\r\nList<CtmXmlElement> jobChainXmlElements = ctmXmlQuery.findXmlElementsByXPath(jobChainTopLevelQuery);\r\nfor(CtmXmlElement jobChainElement: jobChainXmlElements)\r\n{\r\n\tCtmFolder ctmFolder = ctmWorkspace.createFolder(jobChainElement);\r\n}\t\t\t\t\t\r\n"
    },
    "name" : "Create Folder",
    "category" : 0,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Folder Name Rule ----\n\n// For each Control-M Folder created we getting the data from\n// the equivalent XML element data and set the value to be the Folder name\nctmWorkspace.getAllFolders().each{ ctmFolder ->\n\tCtmXmlElement folderElement = ctmFolder.getFolderInputXmlData();\n\tString folderName = folderElement.getValueOfFirstChildElementByName(\"Name\");\n\tctmFolder.setName(folderName);\n\t\n\t//Set Application + Sub Application\n    def applicationElement = folderElement.getFirstChildElementByName(\"ParentApplication\");\n    if(applicationElement != null && !applicationElement.equals(\"\")){\n    String applicationValue = applicationElement.getAttribute(\"path\");\n\tString regexPattern = \"(.*)\\\\.(.*)\\\\.(.*)\";\n\tPattern pattern = Pattern.compile(regexPattern);\n\tMatcher matcher = pattern.matcher(applicationValue);\n\tif(matcher.find() && matcher.group(2))\n\t{\n\t\tString application = matcher.group(2);\n\t\tctmFolder.setApplication(application);\n\t  if(matcher.group(3))\n\t  {\n\t\tString subApplication = matcher.group(3);\n\t\tctmFolder.setSubApplication(subApplication);\n\t  }\n\t}\n  }\n}\n\n\n\n\n"
    },
    "name" : "Folder Name",
    "category" : 0,
    "type" : "script"
  } ],
  "jobTypesRules" : {
    "SAP R3" : [ {
      "rulesData" : {
        "triplets" : [ {
          "entityType" : "",
          "value" : "",
          "operator" : "Equal"
        } ],
        "script" : "//  ---- Create SapR3 Job Rule ----\r\nctmWorkspace.getAllJobs().each { ctmJob ->\r\n    CtmXmlElement element = ctmJob.getJobInputXmlData();\r\n    String type = element.getDirectChildsElementAttrByName(\"JobDefinitionType\", \"path\")[0];\r\n    if (type.contains(\".SAPR3\")){\r\n        String sapType = getSapJobType(element);\r\n        //convert job to SAPR3 with Action: \"Create a new job\"\r\n        if(sapType.equals(\"ABAP_RUN_PRINT\")){\r\n            setSapR3Attributes(ctmJob);\r\n        }\r\n        if(sapType.equals(\"ABAP_RUN\")){\r\n            setSapR3Attributes(ctmJob);\r\n        }\r\n        if(sapType.equals(\"MULTI_STEP_RUN\")){\r\n            setSapR3Attributes(ctmJob);\r\n        }\r\n        //convert job to SAPR3 with Action: \"Copy an existing job\"\r\n        if(sapType.equals(\"TEMPLATE_JOB_RUN\")){\r\n            setSapCopyExsitingJob(ctmJob);\r\n        }\r\n    }\r\n}\r\n\r\n//convert job to SAPR3 with Action: \"Copy an existing job\"\r\ndef setSapCopyExsitingJob(CtmJob ctmJob){\r\n    def jobElementData = ctmJob.getJobInputXmlData();\r\n    ctmJob.setSapR3Type();\r\n    ctmJob.general().sapR3Parameters().setAction(SapR3Action.CopyAnExistingJob);\r\n    List<CtmXmlElement> parametersList = jobElementData.getDirectChildsElementbyName(\"JobDefinitionParameter\");\r\n    parametersList.each{ parameterElement ->\r\n        def parameterNameElement = parameterElement.getFirstChildElementByName(\"Name\");\r\n        String parameterName = parameterNameElement.getText();\r\n        def value = parameterElement.getValueOfFirstChildElementByName(\"DefaultExpression\");\r\n        if(parameterName.equals(\"JOBNAME\")){\r\n            ctmJob.general().sapR3Parameters().setSAPJobName(value);\r\n        }\r\n    }\r\n    ctmJob.general().sapR3Parameters().setConnectionProfile(\"DEFAULT_SAP_CONNECTION_PROFILE\");\r\n}\r\n//extract the SAPR3 job type (\"ABAP_RUN_PRINT\",\"TEMPLATE_JOB_RUN\" ...)\r\ndef getSapJobType(CtmXmlElement jobElement){\r\n    CtmXmlElement sapScriptElement = jobElement.getFirstChildElementByName(\"SAPScript\");\r\n    CtmXmlElement sapScriptAttr = sapScriptElement.getFirstChildElementByName(\"SAPScriptAttribute\");\r\n    String jobType = sapScriptAttr.getValueOfFirstChildElementByName(\"Value\");\r\n    return jobType;\r\n}\r\n\r\n//convert job to SAPR3 with Action: \"Create a new job\"\r\ndef setSapR3Attributes(CtmJob ctmJob){\r\n    ctmJob.setSapR3Type();\r\n    ctmJob.general().sapR3Parameters().setAction(SapR3Action.CreateANewJob);\r\n    CtmXmlElement jobElementData = ctmJob.getJobInputXmlData();\r\n    //set job's description\r\n    setJobDescription(ctmJob);\r\n    //set job's connectionProfile\r\n    String jobDefaultQueuePathValue = jobElementData.getFirstChildElementByName(\"DefaultQueue\").getAttribute(\"path\");\r\n    String regexPattern = \".*\\\\.(.*)\";\r\n    Pattern pattern = Pattern.compile(regexPattern);\r\n    Matcher matcher = pattern.matcher(jobDefaultQueuePathValue);\r\n    if(matcher.find() && matcher.group(1))\r\n    {\r\n        String connectionProfile = matcher.group(1);\r\n        ctmJob.general().sapR3Parameters().setConnectionProfile(connectionProfile);\r\n\r\n    }\r\n    else{\r\n        ctmJob.general().sapR3Parameters().setConnectionProfile(\"DEFAULT_SAP_CONNECTION_PROFILE\");\r\n    }\r\n\r\n    //set job's abap step + variables\r\n    List<CtmXmlElement> parametersList = jobElementData.getDirectChildsElementbyName(\"JobDefinitionParameter\");\r\n    String sapType = getSapJobType(ctmJob.getJobInputXmlData());\r\n    def steps;\r\n    if (\"MULTI_STEP_RUN\".equals(sapType)) {\r\n        steps = parametersList.groupBy {it.getFirstChildElementByName(\"GroupName\").getText() };\r\n        steps.each {\r\n            def step\r\n            def groupName = it.key\r\n            if (groupName.toString().toLowerCase().contains(\"step\")) {\r\n                step = createNewStep(ctmJob)\r\n            }\r\n\r\n            def stepDefinition = it.value\r\n            convertStep(ctmJob, step, stepDefinition)\r\n        };\r\n    } else {\r\n        convertStep(ctmJob, createNewStep(ctmJob), parametersList)\r\n    }\r\n}\r\n\r\ndef createNewStep(CtmJob ctmJob) {\r\n    ctmJob.general().sapR3Parameters().addAbapStep()\r\n}\r\n\r\nprivate void convertStep(CtmJob ctmJob, SapR3AbapStepAPI step, List<CtmXmlElement> parametersList) {\r\n    parametersList.each { parameterElement ->\r\n        def parameterNameElement = parameterElement.getFirstChildElementByName(\"Name\");\r\n        String parameterName = parameterNameElement.getText();\r\n        def value = parameterElement.getValueOfFirstChildElementByName(\"DefaultExpression\");\r\n        if (value.equals(\"\")) return;\r\n\r\n        switch (parameterName) {\r\n            case matches(\"JOBNAME\"):\r\n                ctmJob.general().sapR3Parameters().setSAPJobName(value);\r\n                break;\r\n            case matches(\"JOBCLASS\"):\r\n                setSapJobClass(ctmJob, value);\r\n                break;\r\n            case matches(\"ABAP_PROGRAM_NAME\"):\r\n                step.setAbapProgramName(value);\r\n                break;\r\n            case matches(\"ABAP_VARIANT_NAME\"):\r\n                step.setVariantName(value);\r\n                break;\r\n            case matches(\"TEMPORARY_VARIANT\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.setTemporaryVariant();\r\n                }\r\n                break;\r\n            case matches(\"SAP_USER_NAME\"):\r\n                step.setUser(value);\r\n                break;\r\n            case matches(\"LANGUAGE\"):\r\n                step.setLanguage(value);\r\n                break;\r\n            case matches(\"PRINT_ARMOD\"):\r\n                value = getPrintArchiveMode(value);\r\n                step.setPrintArchiveMode(value);\r\n                break;\r\n            case matches(\"PRINT_PDEST\"):\r\n                step.setOutputDevice(value);\r\n                break;\r\n            case matches(\"PRINT_PRTXT\"):\r\n                step.setDepartment(value);\r\n                step.setRecipient(value);\r\n                break;\r\n            case matches(\"PRINT_PRCOP\"):\r\n                step.setNumberOfCopies(value);\r\n                break;\r\n            case matches(\"PRINT_PRNEW\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.enableNewSpoolRequest();\r\n                } else {\r\n                    step.disableNewSpoolRequest();\r\n                }\r\n                break;\r\n            case matches(\"PRINT_PLIST\"):\r\n                step.setSpoolRequestName(value);\r\n                break;\r\n            case matches(\"PRINT_PRIMM\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.setTimeOfPrint(TimeOfPrint.PrintOutImmediately);\r\n                } else {\r\n                    step.setTimeOfPrint(TimeOfPrint.PrintLater);\r\n                }\r\n                break;\r\n            case matches(\"PRINT_PRREL\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.enableDeleteAfterPrint();\r\n                } else {\r\n                    step.disableDeleteAfterPrint();\r\n                }\r\n                break;\r\n            case matches(\"PRINT_PEXPI\"):\r\n                step.setPrintExpiration(value);\r\n                break;\r\n            case matches(\"PRINT_LICT\"):\r\n                step.setOutputFormatRows(value);\r\n                break;\r\n            case matches(\"PRINT_LISZ\"):\r\n                step.setOutputFormatColumns(value);\r\n                break;\r\n            case matches(\"PRINT_PAART\"):\r\n                step.setOutputFormatLayout(value);\r\n                break;\r\n            case matches(\"PRINT_PRBIG\"):\r\n                value = convertYesNoToBoolean(value);\r\n                if (value) {\r\n                    step.enableSelectionCoverPage();\r\n                } else {\r\n                    step.disableSelectionCoverPage();\r\n                }\r\n                break;\r\n            case matches(\"PRINT_PRSAP\"):\r\n                value = getSapCoverPage(value);\r\n                step.setSapCoverPage(value);\r\n                break;\r\n            case matches(\"PRINT_PRBER\"):\r\n                step.setSpoolRequestAuthorization(value);\r\n                break;\r\n            case matches(\"PRINT_PRUNX\"):\r\n                value = getOsCoverSheet(value);\r\n                step.setOsCoverSheet(value);\r\n                break;\r\n            case matches(\"ARCHIVE_SAP_OBJECT\"):\r\n                step.setArchiveId(value);\r\n                break;\r\n            case matches(\"ARCHIVE_AR_OBJECT\"):\r\n                step.setArchiveDocumentType(value);\r\n                break;\r\n            case matches(\"ARCHIVE_INFO\"):\r\n                step.setArchiveInformationField(value);\r\n                break;\r\n            case matches(\"ARCHIVE_ARCTEXT\"):\r\n                step.setArchiveText(value);\r\n                break;\r\n            default:\r\n                setJobVariable(ctmJob, parameterElement, parameterName);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\ndef matches(String text) {\r\n    ~/${text}(_\\d+)?/\r\n}\r\n\r\ndef convertYesNoToBoolean(String value){\r\n    if(value.equalsIgnoreCase(\"Y\")){\r\n        return true;\r\n    }\r\n    else{\r\n        return false;\r\n    }\r\n}\r\n\r\ndef getSapCoverPage(String value){\r\n    if(value.equalsIgnoreCase(\"D\")){\r\n        return SapCoverPage.DefaultSetting;\r\n    }\r\n    else{\r\n        value = convertYesNoToBoolean(value);\r\n        if(value){\r\n            return SapCoverPage.Print;\r\n        }\r\n        else{\r\n            return SapCoverPage.DoNotPrint;\r\n        }\r\n    }\r\n}\r\n\r\ndef getOsCoverSheet(String value){\r\n    if(value.equalsIgnoreCase(\"D\")){\r\n        return OsCoverSheet.DefaultSetting;\r\n    }\r\n    else{\r\n        value = convertYesNoToBoolean(value);\r\n        if(value){\r\n            return OsCoverSheet.Print;\r\n        }\r\n        else{\r\n            return OsCoverSheet.DoNotPrint;\r\n        }\r\n    }\r\n}\r\n\r\ndef getPrintArchiveMode(String value){\r\n    switch(value){\r\n        case \"1\" :\r\n            return PrintArchiveMode.Print;\r\n            break;\r\n        case \"2\" :\r\n            return PrintArchiveMode.Archive;\r\n            break;\r\n        case \"3\" :\r\n            return PrintArchiveMode.PrintAndArchive\r\n            break;\r\n        default :\r\n            return \"\";\r\n    }\r\n}\r\n\r\ndef setSapJobClass (CtmJob ctmJob,String value){\r\n    switch (value){\r\n        case \"A\" :\r\n            ctmJob.general().sapR3Parameters().setJobClass(SapR3JobClass.HighPriority);\r\n            break;\r\n        case \"B\" :\r\n            ctmJob.general().sapR3Parameters().setJobClass(SapR3JobClass.MediumPriority);\r\n            break;\r\n        case \"C\" :\r\n            ctmJob.general().sapR3Parameters().setJobClass(SapR3JobClass.LowPriority);\r\n            break;\r\n    }\r\n}\r\n\r\ndef setJobDescription(CtmJob ctmJob){\r\n    def jobDef = ctmJob.getJobInputXmlData();\r\n    String description = jobDef.getValueOfFirstChildElementByName(\"Description\");\r\n    ctmJob.setDescription(description);\r\n}\r\n\r\ndef setJobVariable(CtmJob ctmJob, CtmXmlElement parameterElement, String parameterName){\r\n    if(shouldIgonreParameterWithName(parameterName))\r\n        return;\r\n    variableName = parameterName.startsWith(\"%%\") ? parameterName.replace(\"%%\",\"\") : parameterName;\r\n    String variableValue = parameterElement.getValueOfFirstChildElementByName(\"DefaultExpression\");\r\n    ctmJob.general().addLocalVariable(variableName, variableValue);\r\n}\r\n\r\n\r\ndef shouldIgonreParameterWithName(String parameterName) {\r\n    return [\"JOBNAME\",\"ABAP_PROGRAM_NAME\",\"ABAP_VARIANT_NAME\",\"TEMPORARY_VARIANT\",\"JOBCLASS\",\"SAP_USER_NAME\",\"LANGUAGE\",\"TARGET_SERVER\",\r\n            \"TARGET_GROUP\",\"PRINT_ARMOD\",\"PRINT_PDEST\",\"PRINT_PRTXT\",\"PRINT_PRCOP\",\"PRINT_PRNEW\",\"PRINT_PLIST\",\"PRINT_PRIMM\",\"PRINT_PRREL\",\r\n            \"PRINT_PEXPI\",\"PRINT_LICT\",\"PRINT_LISZ\",\"PRINT_PAART\",\"PRINT_PRBIG\",\"PRINT_PRSAP\",\"PRINT_PRREC\",\"PRINT_PRABT\",\"PRINT_PRBER\",\r\n            \"PRINT_PRDSN\",\"PRINT_PTYPE\",\"PRINT_FOOTL\",\"PRINT_PRUNX\",\"DRAFT_MODE\",\"PAGE_ORIENTATION\",\"ARCHIVE_SAP_OBJECT\",\"ARCHIVE_AR_OBJECT\",\r\n            \"ARCHIVE_INFO\",\"ARCHIVE_ARCTEXT\",\"SHOWLOG\",\"SHOWSPOOL\",\"DELETE_JOB\",\"JOBCOUNT\",\"SAP_SYSTEMS\",\"CLIENT\"].contains(parameterName);\r\n}\r\n"
      },
      "jobTypeName" : "SAP R3",
      "name" : "Job",
      "category" : 3,
      "type" : "script"
    } ],
    "OS" : [ {
      "rulesData" : {
        "triplets" : [ {
          "entityType" : "",
          "value" : "",
          "operator" : "Equal"
        } ],
        "script" : "//  ---- Create Os Job Rule ----\r\n\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n\r\n        CtmXmlElement element = ctmJob.getJobInputXmlData();\r\n        String type = element.getDirectChildsElementAttrByName(\"JobDefinitionType\", \"path\")[0];\r\n        //if the job type is different then SAPR3 and the job has script element then he will be converted to Embedded Script job\r\n        if (!type.contains(\".SAPR3\") && isContainsScript(element)){\r\n            ctmJob.setOsType();\r\n            setJobVariables(ctmJob);\r\n            setJobDescription(ctmJob, type);\r\n        }\r\n}\r\n\r\ndef setJobVariables(CtmJob ctmJob){\r\n    def jobElementData = ctmJob.getJobInputXmlData();\r\n    List<CtmXmlElement> parametersList = jobElementData.getDirectChildsElementbyName(\"JobDefinitionParameter\");\r\n    parametersList.each{ parameterElement ->\r\n      def variableName = parameterElement.getValueOfFirstChildElementByName(\"Name\");\r\n      def variableValue = parameterElement.getValueOfFirstChildElementByName(\"DefaultExpression\")\r\n      if(variableName && variableValue){\r\n         variableName = variableName.startsWith(\"%%\") ? variableName.replace(\"%%\",\"\") : variableName;\r\n      }\r\n      ctmJob.general().addLocalVariable(variableName, variableValue);\r\n    }\r\n    \r\n}\r\n\r\n//check if the job contains Script element\r\ndef isContainsScript(element){\r\n    def scriptElement = element.getDirectChildsElementbyName(\"Script\");\r\n    return scriptElement.size() > 0;\r\n}\r\n//set the description for the job and chains the job type to the it\r\ndef setJobDescription(CtmJob ctmJob, type){\r\n    def jobElement = ctmJob.getJobInputXmlData();\r\n\tString description = jobElement.getValueOfFirstChildElementByName(\"Description\");\r\n\tctmJob.setDescription(description +\" \\n*** Type: \" + type + \" ***\");\r\n}"
      },
      "jobTypeName" : "OS",
      "name" : "Job",
      "category" : 3,
      "type" : "script"
    }, {
      "rulesData" : {
        "triplets" : [ {
          "entityType" : "",
          "value" : "",
          "operator" : "Equal"
        } ],
        "script" : "//  ---- Create Os Embedded Script - Script Rule ----\r\n\r\nctmWorkspace.getOsJobs().each{ ctmJob ->\r\n\tCtmXmlElement jobElement = ctmJob.getJobInputXmlData();\r\n\tdef scriptElement = jobElement.getDirectChildsElementbyName(\"Script\")[0];\r\n\t//set the job script to the value of the \"Source\" element\r\n\tString embeddedScriptValue = scriptElement.getValueOfFirstChildElementByName(\"Source\");\r\n\tctmJob.general().osParameters().setEmbeddedScript(embeddedScriptValue);\r\n\t//set the Run as user to the value of the \"RunAsUser\" element (if there is such value)\r\n\tString runAsUser = scriptElement.getValueOfFirstChildElementByName(\"RunAsUser\");\r\n\tif(runAsUser && !runAsUser.isEmpty()){\r\n\t    \tctmJob.general().setRunAs(runAsUser);\r\n\t}\r\n\t//set the script file name to <jobname>.cmd\r\n\tctmJob.general().osParameters().setEmbeddedScriptFileName(ctmJob.getName() + \".cmd\");\r\n} "
      },
      "jobTypeName" : "OS",
      "name" : "Embedded Script - Script",
      "category" : 3,
      "type" : "script"
    } ],
    "SAP BW" : [ {
      "rulesData" : {
        "triplets" : [ {
          "entityType" : "",
          "value" : "",
          "operator" : "Equal"
        } ],
        "script" : "//  ---- Create SapBW Job Rule ----\r\n\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n    CtmXmlElement element = ctmJob.getJobInputXmlData();\r\n    String type = element.getDirectChildsElementAttrByName(\"JobDefinitionType\", \"path\")[0];\r\n    if (type.contains(\".SAPR3\")){\r\n           String sapType = getSapJobType(element);\r\n           //convert the job to SAP Business Warehouse \r\n           if(sapType.equals(\"BW_CHAIN_RUN\")){\r\n              setSapBwAttributes(ctmJob);    \r\n           }\r\n    }\r\n}\r\n// extract the SAP job type\r\ndef getSapJobType(CtmXmlElement jobElement){\r\n    CtmXmlElement sapScriptElement = jobElement.getFirstChildElementByName(\"SAPScript\");\r\n    CtmXmlElement sapScriptAttr = sapScriptElement.getFirstChildElementByName(\"SAPScriptAttribute\");\r\n    String jobType = sapScriptAttr.getValueOfFirstChildElementByName(\"Value\");\r\n    return jobType;\r\n}\r\n\r\n// set the SAP BW attributes\r\ndef setSapBwAttributes(CtmJob ctmJob){\r\n    ctmJob.setSapBWType();\r\n    setJobDescription(ctmJob);\r\n    setSapJobId(ctmJob);\r\n}\r\n// set the jobs's description\r\ndef setJobDescription(CtmJob ctmJob){\r\n    def jobElement = ctmJob.getJobInputXmlData();\r\n\tString description = jobElement.getValueOfFirstChildElementByName(\"Description\");\r\n\tctmJob.setDescription(description);\r\n}\r\n// set the SAP job id\r\ndef setSapJobId(CtmJob ctmJob){\r\n    CtmXmlElement jobElement = ctmJob.getJobInputXmlData();\r\n    def parameterList = jobElement.getDirectChildsElementbyName(\"JobDefinitionParameter\");\r\n    parameterList.each{ parameter ->\r\n        String parameterName = parameter.getValueOfFirstChildElementByName(\"Name\");\r\n        if(parameterName != null && parameterName.equals(\"NAME\")){\r\n            String sapJobId = parameter.getValueOfFirstChildElementByName(\"DefaultExpression\");\r\n            ctmJob.general().sapBWParameters().setID(sapJobId);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
      },
      "jobTypeName" : "SAP BW",
      "name" : "Job",
      "category" : 3,
      "type" : "script"
    } ]
  },
  "projectRuleSetName" : "Redwood_RunMyJobs_ConversionRules",
  "projectRuleSetControlMVersion" : "9.0.20",
  "projectRuleSetDateCreated" : "Tue Nov 05 2019",
  "folderAttributesRules" : [ ],
  "scriptModeString" : "",
  "projectRuleSetConversionType" : "Tabs View",
  "dependencyRules" : [ {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- InCondition Rule ----\r\ndef folderList = ctmWorkspace.getAllFolders();\r\nconditionNameMap = [:];\r\nfolderList.each { ctmFolder -> \r\n    def childrenList = ctmFolder.getChildren();\r\n    if(childrenList.size() > 1){\r\n        //set the condition between the entites by the \"JobChainCall\" order\r\n        childrenList.sort{c1, c2 -> c1.getDescription().compareTo(c2.getDescription())};\r\n        for(int i = 0 ; i < childrenList.size()-1 ; i++)\r\n        {\r\n            def sourceEntity = childrenList.get(i);\r\n            def targetEntity = childrenList.get(i+1);\r\n            def conditionName = sourceEntity.getName()+ \"-TO-\" + targetEntity.getName();\r\n            conditionName = getUniqueConditionName(conditionName);\r\n            sourceEntity.actions().addOutCondition(conditionName);\r\n            targetEntity.prerequisites().addInCondition(conditionName);\r\n        }\r\n    }\r\n    \r\n    //Set folder's Description\r\n    CtmXmlElement folderDef = ctmFolder.getFolderInputXmlData();\r\n\tString description = folderDef.getValueOfFirstChildElementByName(\"Description\");\r\n\tctmFolder.setDescription(description);\r\n\t\r\n}\r\n\r\n//set remaining jobs description\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n  String currentDescription = ctmJob.getDescription();\r\n  if(currentDescription && currentDescription.isNumber()){\r\n      String origDescription = ctmJob.getJobInputXmlData().getValueOfFirstChildElementByName(\"Description\");\r\n      ctmJob.setDescription(origDescription);\r\n  }\r\n}\r\n\r\n//generate unique condition name (for example: if there is already condition name \"x\" then the method return \"x_1\")\r\ndef getUniqueConditionName(String originalConditionName){\r\n    String toRet = originalConditionName;\r\n    if(conditionNameMap.containsKey(originalConditionName)){\r\n        int suffix = conditionNameMap[originalConditionName];\r\n        conditionNameMap[originalConditionName] = suffix + 1;\r\n        toRet = toRet + \"_\" + suffix;\r\n    }\r\n    else{\r\n        conditionNameMap[originalConditionName] = 1;\r\n    }\r\n    return toRet;\r\n}"
    },
    "name" : "In Condition",
    "category" : 4,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Out Condition Rule ----\n//\tfilter how to find dependencies\nString argument = \"\";\ndef jobsList = ctmWorkspace.getAllJobs();\njobsList.each  { ctmJob ->\n  String jobName=ctmJob.general().getName();\n//\tfind  the job that depends on this job according to argument specified\n  CtmXmlElement jobElement = ctmJob.getJobInputXmlData();\n  String dependencyJobName = jobElement.undefined;\n//\tFind all jobs that depende on job being processed\n  def targetJobsList = ctmWorkspace.getAllJobs();\n  targetJobsList.each {dependencyJob ->\n    String depJobName=dependencyJob.general().getName();\n    if(depJobName != null && !depJobName.equals(\"\") && depJobName.equals(dependencyJobName)){\n//\t\t\tuse the addOutCondition API for jobs and folders to add the OutCondition\n      String condName = jobName+\"-TO-\"+depJobName;\n      ctmJob.actions().addOutCondition(condName);\n    }\n  }\n}"
    },
    "name" : "Out Condition",
    "category" : 4,
    "type" : "regular"
  } ],
  "jobRules" : [ {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "Element Name",
        "value" : "JobDefinition",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Create Job Rule ----\nString xpathQuery = \"/JobDefinition\";    // XPath query of the XML element we look for in XML Input Data\n\n// Retrieve all elements with tag name equals to \"JobDefinition\" XML elements into jobsElementData list\nList<CtmXmlElement> jobsElementData = ctmXmlQuery.findXmlElementsByXPath(xpathQuery);\n\n// Run in a loop on all elements with tag name equals to \"JobDefinition\" XML elements found, and create a Control-M Job for each one of them\n// For each Control-M Job created we keep the equivalent XML element data\nfor(CtmXmlElement jobElementData : jobsElementData) {\n        String pathValue = jobElementData.getDirectChildsElementAttrByName(\"JobDefinitionType\", \"path\")[0];\n        if (!pathValue.contains(\".JobChain\")){\n             CtmJob ctmJob = ctmWorkspace.createJob(jobElementData);\n        }\n}"
    },
    "name" : "Create Job",
    "category" : 1,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "Element Name",
        "value" : "Name",
        "operator" : "Equal"
      } ],
      "script" : "//  ---- Job Name Rule ----\n\n// For each Control-M Job created we getting the text of child element tag name \"Name\" from\n// the equivalent XML element data and set the value to be the Job name\nString argument = \"Name\";\nctmWorkspace.getAllJobs().each{ ctmJob ->\n\tCtmXmlElement jobElement = ctmJob.getJobInputXmlData();\n\tString jobName = jobElement.getValueOfFirstChildElementByName(argument);\n\tctmJob.setName(jobName);\n}\n"
    },
    "name" : "Job Name",
    "category" : 1,
    "type" : "script"
  } ],
  "jobAttributesRules" : [ {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//---Create Job Host/Host Group Rule---\r\n\r\nString argument = \"\";\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n setHost(ctmJob);\r\n}\r\n\r\ndef setHost(CtmJob ctmJob){\r\n    CtmXmlElement jobDef = ctmJob.getJobInputXmlData();\r\n\tdef jobDefaultQueue = jobDef.getFirstChildElementByName(\"DefaultQueue\");\r\n\tif(jobDefaultQueue != null){\r\n\t  String jobDefaultQueuePathValue = jobDefaultQueue.getAttribute(\"path\");\r\n\t  regexPattern = \"(.*)\\\\.(.*)\";\r\n\t  pattern = Pattern.compile(regexPattern);\r\n\t  matcher = pattern.matcher(jobDefaultQueuePathValue);\r\n\t  if(matcher.find() && matcher.group(2))\r\n\t  {\r\n\t\tString host = matcher.group(2);\r\n\t\tctmJob.setHost(host);\r\n\t  }\r\n\t}\r\n}"
    },
    "name" : "Job Host/Host Group",
    "category" : 1,
    "type" : "script"
  }, {
    "rulesData" : {
      "triplets" : [ {
        "entityType" : "",
        "value" : "",
        "operator" : "Equal"
      } ],
      "script" : "//---Create Job Application Rule---\r\nctmWorkspace.getAllJobs().each{ ctmJob ->\r\n setApplicationAndSubApplication(ctmJob);\r\n}\r\n\r\ndef setApplicationAndSubApplication(CtmJob ctmJob){\r\n    CtmXmlElement xmlElement = ctmJob.getJobInputXmlData();\r\n\tString jobDefPathValue = xmlElement.getFirstChildElementByName(\"ParentApplication\").getAttribute(\"path\");\r\n\tString regexPattern = \"(.*)\\\\.(.*)\\\\.(.*)\";\r\n\tPattern pattern = Pattern.compile(regexPattern);\r\n\tMatcher matcher = pattern.matcher(jobDefPathValue);\r\n\tif(matcher.find())\r\n\t{\r\n\t    if(matcher.group(2))\r\n\t    {\r\n           String application = matcher.group(2);\r\n\t       ctmJob.setApplication(application);\r\n\t    }\r\n\t    if(matcher.group(3))\r\n\t    {\r\n\t        String subApplication = matcher.group(3);\r\n\t        ctmJob.setSubApplication(subApplication);\r\n\t    }\r\n\t}\r\n}"
    },
    "name" : "Job Application",
    "category" : 1,
    "type" : "script"
  } ]
}